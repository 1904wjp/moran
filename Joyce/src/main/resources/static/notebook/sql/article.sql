/*
Navicat MySQL Data Transfer

Source Server         : localhost_3306
Source Server Version : 50725
Source Host           : localhost:3306
Source Database       : springboot

Target Server Type    : MYSQL
Target Server Version : 50725
File Encoding         : 65001

Date: 2021-12-22 14:42:40
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `create_by` varchar(64) DEFAULT NULL COMMENT '创建者',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `delete_flag` varchar(64) DEFAULT NULL COMMENT '删除标志',
  `update_by` varchar(64) DEFAULT NULL COMMENT '更新者',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `author` varchar(12) DEFAULT NULL COMMENT '作者名',
  `class_id` bigint(32) DEFAULT NULL COMMENT '分类主键',
  `content` text COMMENT '文章的内容',
  `pv_content` text COMMENT '上一版本文章的内容',
  `title` varchar(64) DEFAULT NULL COMMENT '标题',
  `user_id` bigint(32) DEFAULT NULL COMMENT '用户主键',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='文章编辑表';

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('1', 'xdr', '2021-12-18 21:00:47', '0', 'xdr', '2021-12-19 14:33:23', 'xdr', null, '# 错误：找不到或者无法加载主类xxx\n![bug图片](/static/1/img/photo/20211219/98788a4df7b4e51ce5f19ff6e9_16398941 \"bug图片\")\n解决方案：\n#### 一、File—》Invalidate Caches/Restart 选择Invalidate and Restart 或者 只是Invalidate，清除掉缓存，然后 >Rebuild Project\n![示例图片](/static/1/img/photo/20211219/ba9b7349dab258ca1ce5493d5e_16398944 \"实例图片\")\n\n![示例图片](/static/1/img/photo/20211219/051f7e41ccb575eab5907fd95e_16398947 \"示例图片\")\n#### 二、file—>Project Structure 然后 点击Project Settings中的Moudles—>点击减号将所有的Moudle删除-》点击+号重新引入Moudle-》找到项目的父文件夹—>OK（一直NEXT即可）（其他的项目可以寻找pom文件）-》Rebuild Project\n\n![示例图片](/static/1/img/photo/20211219/5efc7c44ed8812abcc90500dc2_1b81c954 \"示例图片\")\n\n![示例图片](/static/1/img/photo/20211219/7138c1415cb2f3582cfb2e32c2_a484b5be \"示例图片\")\n\n![示例图片](/static/1/img/photo/20211219/2e1c9c4c3db22d186da0ef0443_ad42fa14 \"示例图片\")\n\n![示例图片](/static/1/img/photo/20211219/1404ac436496e82899169fc472_cc6cfef7 \"示例图片\")\n\n![示例图片](/static/1/img/photo/20211219/31602748c18b415a34ec907c42_e229fbea \"示例图片\")\n\n![示例图片](/static/1/img/photo/20211219/3623ee4b37b9f409ee34c03473_ed8c3300 \"示例图片\")\n', null, '错误：找不到或者无法加载主类xxx', '1');
INSERT INTO `article` VALUES ('2', 'xdr', '2021-12-19 20:54:05', '0', 'xdr', '2021-12-22 14:35:04', 'xdr', null, '#  Python笔记（1）：中文编码\n中文使用\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n#中文需要引入utf-8，否则报错 \nprint( \"你好，世界\" )\n```\n软件的使用\n\n![](/static/1/img/photo/20211219/628c5047649607ff9e370c4992_47.png)', '#  Python笔记（1）：中文编码\n中文使用\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n#中文需要引入utf-8，否则报错 \nprint( \"你好，世界\" )\n```\n软件的使用\n\n![](/static/1/img/photo/20211219/628c5047649607ff9e370c4992_47.png)', 'Python笔记（1）：中文编码', '1');
INSERT INTO `article` VALUES ('3', 'xdr', '2021-12-19 21:13:25', '0', 'xdr', '2021-12-22 14:27:27', 'xdr', null, '#  python(2):变量\n1.赋值\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ncounter = 100 # 赋值整型变量\nmiles = 1000.0 # 浮点型\nname = \"John\" # 字符串\n \nprint counter\nprint miles\nprint name\n```\n打印\n```\n100\n1000.0\nJohn\n```\n多变量赋值\n创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。\n```python\na = b = c = 1\n```\n多个对象指定多个变量\n```python\na, b, c = 1, 2, \"john\"\n```\n### 标准数据类型\n在内存中存储的数据可以有多种类型。\n例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。\nPython 定义了一些标准类型，用于存储各种类型的数据。\nPython有五个标准的数据类型：\n```\n    Numbers（数字）\n    String（字符串）\n    List（列表）\n    Tuple（元组）\n    Dictionary（字典）\n```\n##### python数字类型\n不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。\n当你指定一个值时，Number 对象就会被创建：\n```python\nvar1 = 1\nvar2 = 10\n```\ndel语句删除单个或多个对象的引用\n```python\ndel var\ndel var_a, var_b\n\n```\n###### Python支持四种不同的数字类型：\n```python\nint（有符号整型）\nlong（长整型，也可以代表八进制和十六进制）\nfloat（浮点型）\ncomplex（复数）\n```\n![](/static/1/img/photo/20211219/ae68f347a3a4d3886a9ced0ff3_05.png)\n长整型也可以使用小写 l，但是还是建议您使用大写 L，避免与数字 1 混淆。Python使用 L 来显示长整型。\nPython 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj,或者 complex(a,b) 表示， 复数的实部 a 和虚部 b 都是浮点型。\n```\n\n注意：long 类型只存在于 Python2.X 版本中，在 2.2 以后的版本中，int 类型数据溢出后会自动转为long类型。在 Python3.X 版本中 long 类型被移除，使用 int 替代。\n\n```\n\n##### ##### Python字符串\n字符串或串(String)是由数字、字母、下划线组成的一串字符。\n```python\ns = \"a1a2···an\"   # n>=0\n```\npython的字串列表有2种取值顺序:\n\n从左到右索引默认0开始的，最大范围是字符串长度少1\n从右到左索引默认-1开始的，最大范围是字符串开头\n![](/static/1/img/photo/20211221/249c4a439aa064790918f3a2e9_1).png)\n\n如果你要实现从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。\n[头下标:尾下标] 获取的子字符串包含头下标的字符，但不包含尾下标的字符。\n```python\n>>> s = \'abcdef\'\n>>> s[1:5]\n\'bcde\'\n```\n也可以从后往前截取，不过是从-1开始\n![](/static/1/img/photo/20211221/1c9e704ca2895588090d75388e_aU.png)\n\n加号（+）是字符串连接运算符，星号（*）是重复操作\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nstr = \'Hello World!\'\nprint str           # 输出完整字符串\nprint str[0]        # 输出字符串中的第一个字符\nprint str[2:5]      # 输出字符串中第三个至第六个之间的字符串\nprint str[2:]       # 输出从第三个字符开始的字符串\nprint str * 2       # 输出字符串两次\nprint str + \"TEST\"  # 输出连接的字符串\n```\n答应结果\n```\nHello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST\n```\nletters的使用\n\nletters(begin,end,stemp)\nbegin: 第一个数\nend: 结尾数\nstemp: 步长 \n从begin开始，end结束(不包括end)，截取begin到end中begin下标+n*temp，包括begin不包括end的数据，且begin下表 + n * temp < end下表\n![](/static/1/img/photo/20211221/790728417abb73279b94fff27d__2.png)\n\n##### Python列表a(感觉就是平时见到的数组)\nList（列表） 是 Python 中使用最频繁的数据类型。\n列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。\n列表用 [ ] 标识，是 python 最通用的复合数据类型。\n列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。\n![](/static/1/img/photo/20211221/c7df2c4d529462f51295d2ee39_w1.png)\n加号 + 是列表连接运算符，星号 * 是重复操作\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nlist = [ \'runoob\', 786 , 2.23, \'john\', 70.2 ]\ntinylist = [123, \'john\']\nprint list               # 输出完整列表\nprint list[0]            # 输出列表的第一个元素\nprint list[1:3]          # 输出第二个至第三个元素 \nprint list[2:]           # 输出从第三个开始至列表末尾的所有元素\nprint tinylist * 2       # 输出列表两次\nprint list + tinylist    # 打印组合的列表\n```\n```\n打印\n[\'runoob\', 786, 2.23, \'john\', 70.2]\nrunoob\n[786, 2.23]\n[2.23, \'john\', 70.2]\n[123, \'john\', 123, \'john\']\n[\'runoob\', 786, 2.23, \'john\', 70.2, 123, \'john\']\n```\n\n##### Python 元组\n元组是另一个数据类型，类似于 List（列表）。\n元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\ntuple = ( \'runoob\', 786 , 2.23, \'john\', 70.2 )\ntinytuple = (123, \'john\')\nonetuple = (123,)  ##这是单个元组\nonetuple2 = (123)  ##这是数组\nprint tuple               # 输出完整元组\nprint tuple[0]            # 输出元组的第一个元素\nprint tuple[1:3]          # 输出第二个至第四个（不包含）的元素 \nprint tuple[2:]           # 输出从第三个开始至列表末尾的所有元素\nprint tinytuple * 2       # 输出元组两次\nprint tuple + tinytuple   # 打印组合的元组\n```\n打印\n```\n(\'runoob\', 786, 2.23, \'john\', 70.2)\nrunoob\n(786, 2.23)\n(2.23, \'john\', 70.2)\n(123, \'john\', 123, \'john\')\n(\'runoob\', 786, 2.23, \'john\', 70.2, 123, \'john\')\n```\n\n##### 列表和元组的区别：\n属性上：\n	1.列表是动态数组，可以改变其长度和数据；\n	2.元组是静态数组，其长度和内容不可改变；\n	3.元组静态原因，使用元组不用每次都去访问内核去分配空间;\n应用上:\n	1.列表用于多个相互独立的对象数据集合；\n	2.元组用于一个不会改变的一个或多个属性的对象；\n\n对比：\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\ntuple = ( \'runoob\', 786 , 2.23, \'john\', 70.2 )\nlist = [ \'runoob\', 786 , 2.23, \'john\', 70.2 ]\ntuple[2] = 1000    # 元组中是非法应用\nlist[2] = 1000     # 列表中是合法应用\n```\n##### Python 字典\n字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。可以是java中的对象，可以是数字和字符\n两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n字典用\"{ }\"标识。字典由索引(key)和它对应的值value组成。\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\ndict = {}\ndict[\'one\'] = \"This is one\"\ndict[2] = \"This is two\"\ntinydict = {\'name\': \'runoob\',\'code\':6734, \'dept\': \'sales\'}\nprint dict[\'one\']          # 输出键为\'one\' 的值\nprint dict[2]              # 输出键为 2 的值\nprint tinydict             # 输出完整的字典\nprint tinydict.keys()      # 输出所有键\nprint tinydict.values()    # 输出所有值\n```\n打印\n```\nThis is one\nThis is two\n{\'dept\': \'sales\', \'code\': 6734, \'name\': \'runoob\'}\n[\'dept\', \'code\', \'name\']\n[\'sales\', 6734, \'runoob\']\n```\n转换\n将x转换为一个整数\nint(x [,base])\n\n将x转换为一个长整数\nlong(x [,base] )\n\n将x转换到一个浮点数\nfloat(x)\n\n创建一个复数\ncomplex(real [,imag])\n\n将对象 x 转换为字符串\nstr(x)\n\n将对象 x 转换为表达式字符串\nrepr(x)\n\n用来计算在字符串中的有效Python表达式,并返回一个对象\neval(str)\n\n将序列 s 转换为一个元组\ntuple(s)\n\n将序列 s 转换为一个列表\nlist(s)\n\n转换为可变集合\nset(s)\n\n创建一个字典。d 必须是一个序列 (key,value)元组。\ndict(d)\n\n转换为不可变集合\nfrozenset(s)\n\n将一个整数转换为一个字符\nchr(x)\n\n将一个整数转换为Unicode字符\nunichr(x)\n\n将一个字符转换为它的整数值\nord(x)\n\n将一个整数转换为一个十六进制字符串\nhex(x)\n\n将一个整数转换为一个八进制字符串\noct(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', '#  python(2):变量\n1.赋值\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ncounter = 100 # 赋值整型变量\nmiles = 1000.0 # 浮点型\nname = \"John\" # 字符串\n \nprint counter\nprint miles\nprint name\n```\n打印\n```\n100\n1000.0\nJohn\n```\n多变量赋值\n创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。\n```python\na = b = c = 1\n```\n多个对象指定多个变量\n```python\na, b, c = 1, 2, \"john\"\n```\n### 标准数据类型\n在内存中存储的数据可以有多种类型。\n例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。\nPython 定义了一些标准类型，用于存储各种类型的数据。\nPython有五个标准的数据类型：\n```\n    Numbers（数字）\n    String（字符串）\n    List（列表）\n    Tuple（元组）\n    Dictionary（字典）\n```\n##### python数字类型\n不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。\n当你指定一个值时，Number 对象就会被创建：\n```python\nvar1 = 1\nvar2 = 10\n```\ndel语句删除单个或多个对象的引用\n```python\ndel var\ndel var_a, var_b\n\n```\n###### Python支持四种不同的数字类型：\n```python\nint（有符号整型）\nlong（长整型，也可以代表八进制和十六进制）\nfloat（浮点型）\ncomplex（复数）\n```\n![](/static/1/img/photo/20211219/ae68f347a3a4d3886a9ced0ff3_05.png)\n长整型也可以使用小写 l，但是还是建议您使用大写 L，避免与数字 1 混淆。Python使用 L 来显示长整型。\nPython 还支持复数，复数由实数部分和虚数部分构成，可以用 a + bj,或者 complex(a,b) 表示， 复数的实部 a 和虚部 b 都是浮点型。\n```\n\n注意：long 类型只存在于 Python2.X 版本中，在 2.2 以后的版本中，int 类型数据溢出后会自动转为long类型。在 Python3.X 版本中 long 类型被移除，使用 int 替代。\n\n```\n\n##### ##### Python字符串\n字符串或串(String)是由数字、字母、下划线组成的一串字符。\n```python\ns = \"a1a2···an\"   # n>=0\n```\npython的字串列表有2种取值顺序:\n\n从左到右索引默认0开始的，最大范围是字符串长度少1\n从右到左索引默认-1开始的，最大范围是字符串开头\n![](/static/1/img/photo/20211221/249c4a439aa064790918f3a2e9_1).png)\n\n如果你要实现从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。\n[头下标:尾下标] 获取的子字符串包含头下标的字符，但不包含尾下标的字符。\n```python\n>>> s = \'abcdef\'\n>>> s[1:5]\n\'bcde\'\n```\n也可以从后往前截取，不过是从-1开始\n![](/static/1/img/photo/20211221/1c9e704ca2895588090d75388e_aU.png)\n\n加号（+）是字符串连接运算符，星号（*）是重复操作\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nstr = \'Hello World!\'\nprint str           # 输出完整字符串\nprint str[0]        # 输出字符串中的第一个字符\nprint str[2:5]      # 输出字符串中第三个至第六个之间的字符串\nprint str[2:]       # 输出从第三个字符开始的字符串\nprint str * 2       # 输出字符串两次\nprint str + \"TEST\"  # 输出连接的字符串\n```\n答应结果\n```\nHello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST\n```\nletters的使用\n\nletters(begin,end,stemp)\nbegin: 第一个数\nend: 结尾数\nstemp: 步长 \n从begin开始，end结束(不包括end)，截取begin到end中begin下标+n*temp，包括begin不包括end的数据，且begin下表 + n * temp < end下表\n![](/static/1/img/photo/20211221/790728417abb73279b94fff27d__2.png)\n\n##### Python列表a(感觉就是平时见到的数组)\nList（列表） 是 Python 中使用最频繁的数据类型。\n列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。\n列表用 [ ] 标识，是 python 最通用的复合数据类型。\n列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。\n![](/static/1/img/photo/20211221/c7df2c4d529462f51295d2ee39_w1.png)\n加号 + 是列表连接运算符，星号 * 是重复操作\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nlist = [ \'runoob\', 786 , 2.23, \'john\', 70.2 ]\ntinylist = [123, \'john\']\nprint list               # 输出完整列表\nprint list[0]            # 输出列表的第一个元素\nprint list[1:3]          # 输出第二个至第三个元素 \nprint list[2:]           # 输出从第三个开始至列表末尾的所有元素\nprint tinylist * 2       # 输出列表两次\nprint list + tinylist    # 打印组合的列表\n```\n```\n打印\n[\'runoob\', 786, 2.23, \'john\', 70.2]\nrunoob\n[786, 2.23]\n[2.23, \'john\', 70.2]\n[123, \'john\', 123, \'john\']\n[\'runoob\', 786, 2.23, \'john\', 70.2, 123, \'john\']\n```\n\n##### Python 元组\n元组是另一个数据类型，类似于 List（列表）。\n元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。\n\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\ntuple = ( \'runoob\', 786 , 2.23, \'john\', 70.2 )\ntinytuple = (123, \'john\')\nonetuple = (123,)  ##这是单个元组\nonetuple2 = (123)  ##这是数组\nprint tuple               # 输出完整元组\nprint tuple[0]            # 输出元组的第一个元素\nprint tuple[1:3]          # 输出第二个至第四个（不包含）的元素 \nprint tuple[2:]           # 输出从第三个开始至列表末尾的所有元素\nprint tinytuple * 2       # 输出元组两次\nprint tuple + tinytuple   # 打印组合的元组\n```\n打印\n```\n(\'runoob\', 786, 2.23, \'john\', 70.2)\nrunoob\n(786, 2.23)\n(2.23, \'john\', 70.2)\n(123, \'john\', 123, \'john\')\n(\'runoob\', 786, 2.23, \'john\', 70.2, 123, \'john\')\n```\n\n##### 列表和元组的区别：\n属性上：\n	1.列表是动态数组，可以改变其长度和数据；\n	2.元组是静态数组，其长度和内容不可改变；\n	3.元组静态原因，使用元组不用每次都去访问内核去分配空间;\n应用上:\n	1.列表用于多个相互独立的对象数据集合；\n	2.元组用于一个不会改变的一个或多个属性的对象；\n\n对比：\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\ntuple = ( \'runoob\', 786 , 2.23, \'john\', 70.2 )\nlist = [ \'runoob\', 786 , 2.23, \'john\', 70.2 ]\ntuple[2] = 1000    # 元组中是非法应用\nlist[2] = 1000     # 列表中是合法应用\n```\n##### Python 字典\n字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。可以是java中的对象，可以是数字和字符\n两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n字典用\"{ }\"标识。字典由索引(key)和它对应的值value组成。\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\ndict = {}\ndict[\'one\'] = \"This is one\"\ndict[2] = \"This is two\"\ntinydict = {\'name\': \'runoob\',\'code\':6734, \'dept\': \'sales\'}\nprint dict[\'one\']          # 输出键为\'one\' 的值\nprint dict[2]              # 输出键为 2 的值\nprint tinydict             # 输出完整的字典\nprint tinydict.keys()      # 输出所有键\nprint tinydict.values()    # 输出所有值\n```\n打印\n```\nThis is one\nThis is two\n{\'dept\': \'sales\', \'code\': 6734, \'name\': \'runoob\'}\n[\'dept\', \'code\', \'name\']\n[\'sales\', 6734, \'runoob\']\n```\n转换\n将x转换为一个整数\nint(x [,base])\n\n将x转换为一个长整数\nlong(x [,base] )\n\n将x转换到一个浮点数\nfloat(x)\n\n创建一个复数\ncomplex(real [,imag])\n\n将对象 x 转换为字符串\nstr(x)\n\n将对象 x 转换为表达式字符串\nrepr(x)\n\n用来计算在字符串中的有效Python表达式,并返回一个对象\neval(str)\n\n将序列 s 转换为一个元组\ntuple(s)\n\n将序列 s 转换为一个列表\nlist(s)\n\n转换为可变集合\nset(s)\n\n创建一个字典。d 必须是一个序列 (key,value)元组。\ndict(d)\n\n转换为不可变集合\nfrozenset(s)\n\n将一个整数转换为一个字符\nchr(x)\n\n将一个整数转换为Unicode字符\nunichr(x)\n\n将一个字符转换为它的整数值\nord(x)\n\n将一个整数转换为一个十六进制字符串\nhex(x)\n\n将一个整数转换为一个八进制字符串\noct(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', 'python(2):变量', '1');
INSERT INTO `article` VALUES ('4', 'xdr', '2021-12-20 17:06:45', '0', null, null, 'xdr', null, '# nodejs运行命令 nodejs运行命令\n```c\n ###初始化文件（拉去淘宝镜像）\n npm install --registry=https://registry.npm.taobao.org\n  ###运行文件\n npm run dev\n```', null, 'nodejs运行命令 nodejs运行命令', '1');
INSERT INTO `article` VALUES ('5', 'xdr', '2021-12-21 15:36:35', '0', 'xdr', '2021-12-22 14:27:39', 'xdr', null, '# python(3) 运算符\n这一章何其他的编程差不多，简单过一下，特殊的重点提！！！！\n# 算数运算符\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \na = 21\nb = 10\nc = 0\n \nc = a + b\nprint \"1 - c 的值为：\", c\n \nc = a - b\nprint \"2 - c 的值为：\", c \n \nc = a * b\nprint \"3 - c 的值为：\", c \n \nc = a / b\nprint \"4 - c 的值为：\", c \n \nc = a % b\nprint \"5 - c 的值为：\", c\n \n# 修改变量 a 、b 、c\na = 2\nb = 3\nc = a**b \nprint \"6 - c 的值为：\", c\n \na = 9\nb = 2\nc = a//b \nprint \"7 - c 的值为：\", c\n```\n打印\n```\n1 - c 的值为： 31\n2 - c 的值为： 11\n3 - c 的值为： 210\n4 - c 的值为： 2\n5 - c 的值为： 1\n6 - c 的值为： 8\n7 - c 的值为： 4\n```\n这里提三个运算符：\n1.%：返回除法的余数，这里a=21,b=10。a除以b得2余1，所以返回1。故a%b=1\n2.**：返回x的y次幂，这里a=2,b=3。a**b就表示a的b次方，也就是2的3次方得8，故a**b=8\n3.//：返回商的整数部分（向下取整）。这里a=9,b=2。a//b就表示a/b得4.5,但是是取整数（4和5），去较小的一方得4，a=-9就取-5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', '# python(3) 运算符\n这一章何其他的编程差不多，简单过一下，特殊的重点提！！！！\n# 算数运算符\n```python\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \na = 21\nb = 10\nc = 0\n \nc = a + b\nprint \"1 - c 的值为：\", c\n \nc = a - b\nprint \"2 - c 的值为：\", c \n \nc = a * b\nprint \"3 - c 的值为：\", c \n \nc = a / b\nprint \"4 - c 的值为：\", c \n \nc = a % b\nprint \"5 - c 的值为：\", c\n \n# 修改变量 a 、b 、c\na = 2\nb = 3\nc = a**b \nprint \"6 - c 的值为：\", c\n \na = 9\nb = 2\nc = a//b \nprint \"7 - c 的值为：\", c\n```\n打印\n```\n1 - c 的值为： 31\n2 - c 的值为： 11\n3 - c 的值为： 210\n4 - c 的值为： 2\n5 - c 的值为： 1\n6 - c 的值为： 8\n7 - c 的值为： 4\n```\n这里提三个运算符：\n1.%：返回除法的余数，这里a=21,b=10。a除以b得2余1，所以返回1。故a%b=1\n2.**：返回x的y次幂，这里a=2,b=3。a**b就表示a的b次方，也就是2的3次方得8，故a**b=8\n3.//：返回商的整数部分（向下取整）。这里a=9,b=2。a//b就表示a/b得4.5,但是是取整数（4和5），去较小的一方得4，a=-9就取-5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', 'python(3) 运算符', '1');
